1. 주석 처리
{/*  주석 내용  */}


2. 데이터 바인딩
{ } 로 감싸서 변수 넣기

var data = '안녕';
<div>{data}</div>


3. JSX에서 class 선언 
class가 아닌 className으로 선언

- class = "blue-div" (X)
- className = "blue-div" (O)


4. State 사용 방법
- useState() : state를 하나 만들어주는 함수
- 필수 import React, { useState } from 'react';
- 사용 이유?
    - 변수가 변경될 때 자동으로 HTML을 재렌더링하기 위함.
- let [state_title, state_title_change] = useState("This is State");
    - state_title : State Value. 즉, "This is State" (1번 째 배열 항목)
    - state_title_change : State Value 변경 함수 (2번 째 배열 항목)


5. onClick 사용
- JS : <div onclick="함수 or 코드">
- JSX : <div onClick={함수}>

ex) 
<div onClick={ func_hi }> 
<div onClick={ function(){ 실행할 코드 } }>
<div onClick={ () => { 실행할 코드 } }>


6. deep copy 방법
- object / array 자료형 deep copy 시 ... 을 이용
ex) 
let [state_title, state_title_change] = useState(["지금 날씨는 영하 9도네요.","This is State", "오늘 풋살합니다~"]);
var value = [...state_title];


7. map (반복문) 사용 방법
- array 자료형에 사용할 수 있는 내장 함수

ex)
var array = [2,3,4];
array.map(function(item){
  return item;
});

ex)
function App (){
  return (
    <div>
      ...
      { array.map(function(item){
        return (<div>item</div>)
      }) }
    </div>
  )
}


8. props를 이용해 모달에 state 전달
- 자식컴포넌트에 전송할이름={보내줄 state명}
- 자식컴포넌트 선언하는 function 안에 파라미터 생성 후 사용

ex)
function App (){
  let [state_title, state_title_change] = useState(["지금 날씨는 영하 9도네요.","This is State", "오늘 풋살합니다~"]);
  let [date_, date_change] = useState(["2021-12-17","2021-12-18","2021-12-19"]);

  return (
    <div>
      <Modal state_title={state_title} date_={date_}></Modal>
    </div>
  )
}

function Modal(props){
  return (
    <div className="modal">
      <h2>제목 { props.state_title[0] }</h2>
      <p>날짜 { props.date_[0]} </p>
      <p>상세내용</p>
    </div>
  )
}


9. Inline Style 주는 방법
ex) style = { {fontSize : "10px", align:"center"} }


10. 외부 파일에서 DATA import / export
- 데이터 파일에서 export 처리
- js 파일에서 불러올 데이터파일 import 처리 필요

10-1. export default 사용
- (data.js)
var data = 'ksm';
export default data;
// export default [내보내길 원하는 데이터]
// 데이터에는 변수명, 함수명, 자료형 전부 가능
// 파일마다 export default 키워드는 하나만 사용 가능

- (App.js)
import data from './data.js'
// 같은 경로의 data.js에서 데이터를 가져오며 그 데이터 변수의 이름은 data
// import myData from './data.js'
// export default를 한 데이터 파일을 불러올 땐 변수 이름 자유롭게 설정 가능

10-2. export {} 사용
- (data.js)
var data1 = 'ksm';
var data2 = 'kimseongmok';
export {data1, data2}
// 변수나 함수명이 필요

- (App.js)
import {data1, data2} from './data.js';
// export했던 변수명을 그대로 사용 (변수 이름 작명 X)


11. Router
- Router : 여러 페이지 이용 시 사용
  - BrowseRouter : URL 맨 뒤에 # 이 붙지 않은 채로 시작
  - HashRouter : URL 맨 뒤에 # 이 붙은 채로 시작
- 설치
  - yarn 환경 : yarn add react-router-dom@5
  - npm 환경 : npm install react-router-dom@5 
ex)
<Route path="/"> 
  <div>메인페이지인데요</div>
</Route>
<Route path="/detail">
  <div>상세페이지인데요</div>
</Route>
// 위 코드에서 /detail을 들어가면 메인페이지인데요 도 보인다.
// 이게 싫다면 <Route exact path="/"></Route> 로 하면 된다.

- Router에서 URL Parameter를 이용할 수 있다.
  - Router에서 주소가 :으로 시작하는 경우 변수를 의미한다.
ex)
(App.js)
<Route path="/detail/:id">
  <Detail data={shoesData}></Detail>
</Route>

(detail.js)
import { useHistory, useParams } from 'react-router-dom';
let { id } = useParams();
// 이 id 부분이 주소창에 입력한 id 변수


12. NavBar에서 링크 사용
ex)
<div>
  <Navbar>
      <Nav.Link> <Link to="/">Home</Link> </Nav.Link>
      <Nav.Link> <Link to="/detail">Detail</Link> </Nav.Link>
  </Navbar> 
</div>


13. useHistory 기능
ex)
import { useHistory } from 'react-router-dom';

let history = useHistory();
history.goBack();     // 뒤로가기
history.push("/");    // /로 이동


14. Switch
- Switch 안에 있는 Router에서 여러개의 path가 매칭되어도 맨 위의 Router만 보여주는 기능
ex)
<Switch>
  <Route path="/">
    어쩌구
  </Route>
  <Route path="/detail">
    <Detail/>
  </Route>
  <Route path="/:id">
    <div>새로 만든 route입니다</div>
  </Route>
</Switch>
// 이러면 맨 위의 /만 보여줌


15. find
- Array 안에서 원하는 데이터를 찾을 때 사용
ex)
let findGood = props.data.find(function(Good){
  return Good.id == id
});


16. Image는 public 안에 폴더를 넣어둔다.
ex) 
C:\KSM_PRJ\shop_using_react\public\imgs\appre.png
-> /imgs/appre.png


17. Styled-components
- 컴포넌트 생성 시, 스타일을 바로 적용하는 기능
- 설치
  - yarn 환경 : yarn add styled-components
  - npm 환경 : npm install styled-components
- Styled-Components 생성 방법
  1. 변수 명은 처음에는 대문자. (다른 컴포넌트와 동일)
  2. props를 이용해 변수 사용 가능
  3. ''를 이용해서 스타일을 지정 (1왼쪽에 있는 ~키)
ex)
import styled from 'styled-components';
...

let Box = styled.div`
  padding : 20px;
`;
let H4size = styled.h4`
  font-Size : 20px;
  color : ${ props => props.color };
`;
...

return(
	...
	<Box>
    <H4size color={'red'}>빨간색 테스트.</H4size>
    <H4size color={'green'}>초록색 테스트.</H4size>
  </Box>
)


